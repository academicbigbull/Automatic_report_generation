10.28
学习python-docx基础语法
from docx import Document
from docx.shared import Inches

import win32com#win32com（主要用作doc转docx格式转换用）
from win32com.client import Dispatch, constants

from mailmerge import MailMerge#docx-mailmerge（用作按照模板生成大量同类型文档）
import matplotlib.pyplot as plt


#创建一个word文档
# 导包
from docx import Document

# 实例化一个Document对象，相当于打开word软件，新建一个空白文件
doc = Document()
# word文件尾部增加一个段落，并写入内容
paragraph = doc.add_paragraph('Hello! I am created by python-docx.')
# 原有段落前面插入一个段落，并写入内容
prior_paragraph = paragraph.insert_paragraph_before('Good day!')
# 保存word文件到当前文件夹
doc.save(r"E:\python\自动生成word图文报告\test.docx")


#------------------------------------------------------------------------------
# 增加标题：add_heading(self, text="", level=1):
doc.add_heading('标题',1)

# 增加段落正文，add_paragraph(self, text='', style=None)：返回一个 Paragraph 段落对象
par = doc.add_paragraph('第一个段落：')
print(par)  # <docx.text.paragraph.Paragraph object at 0x000000000A889F08>

# 在段落中添加文字块，add_run(self, text=None, style=None):返回一个 run 对象
run_ = par.add_run('段落文字块')
print(run_)     # <docx.text.run.Run object at 0x000000000B2D31C8>

# 增加图片，add_picture(self, image_path_or_stream, width=None, height=None):返回一个 InlineShape 对象
pic_par = doc.add_picture(r"C:\Users\cm\Pictures\Saved Pictures\A68FDC385F6CAF1CCB92F11C7A2B9828.png")
print(pic_par)  # <docx.shape.InlineShape object at 0x000000000B2F11C8>

p2 = doc.add_paragraph('第二个段落：')
p2.add_run('段落文字块')

# 增加表格add_table(self, rows, cols, style=None):返回一个表格对象
table = doc.add_table(2,3)
print(table)  # <docx.table.Table object at 0x000000000B302688>

# 保存文件
doc.save('test.docx')

#---------------------------------------------------------------
# 增加分页符
doc.add_page_break()

# 增加标题 API 分析， 只能设置 0-9 级标题
for i in range(0,10):
    doc.add_heading(f'标题{i}', i)
doc.save(r'增加标题.docx')
#-------------------------------------------------------------------------

#内容修改，正则表达式替换原有表达式的英文引号
from docx.oxml.ns import qn # 设置中文字体需导入 qn 模块
import re

from docx import Document
from docx.oxml.ns import qn  # 设置中文字体需导入 qn 模块
import re

# 加载Word文档
doc = Document(r"正则替换test.docx")

# 定义正则表达式模式，匹配所有英文双引号中的文本
restr = '"(?:[^"])*"'

# 遍历文档中的所有段落
for p in doc.paragraphs:
    # 查找所有符合模式的文本（即被英文双引号包围的文本）
    list_results = re.findall(restr, p.text)

    # 遍历查找到的所有文本
    for result in list_results:
        # 替换段落中的英文双引号为中文书名号，并保留其中的文字
        p.text = p.text.replace(result, '“' + result[1:-1] + '”')

    # 修改格式的操作必须放在替换操作之后，否则替换操作的效果会被覆盖
    # 遍历段落中的所有run（即连续的相同格式的文字）
    for run in p.runs:
        # 设置run中的西文字体为 `Times New Roman`
        run.font.name = 'Times New Roman'

        # 使用 `qn` 函数设置东亚语言（如中文）的字体为 `宋体`
        run.font.element.rPr.rFonts.set(qn('w:eastAsia'), '宋体')

# 保存修改后的文档
doc.save(r'test_modify.docx')


#--------------------------------------------------------------------


10.29
学习处理得到的数据，示例json数据
@app.route('/generate', methods=['POST'])
def generate_report():
    # 获取表单数据
    name = request.form['name']
    date = request.form['date']
    data = request.form['data']

    # 将字符串数据转换为 JSON 格式
    import json
    data = json.loads(data)

    # 处理数据
    df = pd.DataFrame(data)

#---------------------------------------------------------------------------

10.30
开发框架选择flask，结合python-docx以及pandas库处理得到的数据做一个简单的web页面进行前端（ai写的）获取的字符串数据转换成json数据然后用json.loads(data)将 JSON 格式的字符串转换为 Python 对象（通常是字典或列表）。
转为python对象后df = pd.DataFrame(data)将 Python 对象转换为 Pandas DataFrame，以便于后续处理和生成表格。
接下来就将得到的数据用python-docx工具对文档进行修改。大体就是先创建一个word文档然后遍历得到的数据进行插入标题、文字以及表格等。

1、app.py
from flask import Flask, render_template, request, send_file
from docx import Document
from docx.shared import Pt
from datetime import datetime
import pandas as pd

app = Flask(__name__)


@app.route('/')
def index():
    return render_template('index.html')


@app.route('/generate', methods=['POST'])
def generate_report():
    # 获取表单数据
    name = request.form['name']
    date = request.form['date']
    data = request.form['data']

    # 将字符串数据转换为 JSON 格式
    import json
    data = json.loads(data)

    # 处理数据
    df = pd.DataFrame(data)

    # 创建一个新的 Word 文档
    doc = Document()

    # 添加标题
    title = doc.add_heading('报告', level=1)
    title.alignment = 1  # 居中对齐

    # 添加作者和日期
    doc.add_paragraph(f'作者: {name}')
    doc.add_paragraph(f'日期: {date}')

    # 添加表格
    table = doc.add_table(rows=1, cols=len(df.columns))
    hdr_cells = table.rows[0].cells
    for i, column in enumerate(df.columns):
        hdr_cells[i].text = column

    for _, row in df.iterrows():
        row_cells = table.add_row().cells
        for i, value in enumerate(row):
            row_cells[i].text = str(value)

    # 保存文档
    filename = f'report_{datetime.now().strftime("%Y%m%d_%H%M%S")}.docx'
    doc.save(filename)

    # 返回生成的文件
    return send_file(filename, as_attachment=True)


if __name__ == '__main__':
    app.run(debug=True)
#----------------------------------------------------------------------------------------------
2、index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>生成报告</title>
</head>
<body>
    <h1>生成报告</h1>
    <form action="/generate" method="post">
        <label for="name">姓名:</label>
        <input type="text" id="name" name="name" required><br><br>

        <label for="date">日期:</label>
        <input type="date" id="date" name="date" required><br><br>

        <label for="data">数据 (JSON 格式):</label><br>
        <textarea id="data" name="data" rows="10" cols="50" required>
[
    {"姓名": "张三", "年龄": 25, "性别": "男"},
    {"姓名": "李四", "年龄": 30, "性别": "女"},
    {"姓名": "王五", "年龄": 28, "性别": "男"}
]
        </textarea><br><br>

        <button type="submit">生成报告</button>
    </form>
</body>
</html>


#11.3
在后端添加了插入图片进报告的功能
from flask import Flask, render_template, request, send_file
from docx import Document
from docx.shared import Pt, Inches
from datetime import datetime
import pandas as pd
import io
import os

app = Flask(__name__)

@app.route('/')
def index():
    return render_template('index1.html')

@app.route('/generate', methods=['POST'])
def generate_report():
    try:
        # 获取表单数据
        name = request.form['name']
        date = request.form['date']
        data = request.form['data']
        image_file = request.files['image']

        # 将字符串数据转换为 JSON 格式
        import json
        data = json.loads(data)

        # 处理数据
        df = pd.DataFrame(data)

        # 创建一个新的 Word 文档
        doc = Document()

        # 添加标题
        title = doc.add_heading('报告', level=1)
        title.alignment = 1  # 居中对齐

        # 添加作者和日期
        doc.add_paragraph(f'作者: {name}')
        doc.add_paragraph(f'日期: {date}')

        # 添加表格
        table = doc.add_table(rows=1, cols=len(df.columns))
        hdr_cells = table.rows[0].cells
        for i, column in enumerate(df.columns):
            hdr_cells[i].text = column

        for _, row in df.iterrows():
            row_cells = table.add_row().cells
            for i, value in enumerate(row):
                row_cells[i].text = str(value)

        doc.add_paragraph()#表格中间与图片空行

        # 如果有上传的图片，则插入图片并设置居中
        if image_file:
            image_format = image_file.filename.split('.')[-1].lower()
            if image_format in ['jpg', 'jpeg', 'png']:
                image_stream = io.BytesIO(image_file.read())
                picture = doc.add_picture(image_stream, width=Inches(4))
                last_paragraph = doc.paragraphs[-1]
                last_paragraph.alignment = 1
            else:
                return "Unsupported image format. Please upload a JPG or PNG image.", 400

        # 保存文档到内存中
        filename = f'report_{datetime.now().strftime("%Y%m%d_%H%M%S")}.docx'
        doc.save(filename)
        with open(filename, 'rb') as f:
            file_data = f.read()
        os.remove(filename)

        # 返回生成的文件，设置适当的响应头和文件名
        return send_file(io.BytesIO(file_data), as_attachment=True, download_name=filename, mimetype='application/vnd.openxmlformats-officedocument.wordprocessingml.document')
    except Exception as e:
        # 打印错误信息并返回一个友好的错误消息给用户
        print(f"An error occurred: {e}")
        return "An error occurred while generating the report.", 500

if __name__ == '__main__':
    app.run(debug=True)

#------------------------------------------------------------------------------------------------------------------------------------
11.5
优化了一下前端页面
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        body {
            background-color: #f4f4f4; /* 浅灰色背景 */
            font-family: 'Arial', sans-serif; /* 设置字体 */
            margin: 0;
            padding: 0;
            color: #333; /* 文本颜色 */
        }
        #head {
            text-align: center;
            font-size: 36px;
            font-weight: bold;
            margin: 30px 0;
            color: #333; /* 标题颜色 */
        }
       .container {
            display: flex;
            flex-direction: column;
            align-items: center;
            width: 100%;
            max-width: 600px; /* 最大宽度 */
            margin: auto; /* 水平居中 */
            padding: 20px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* 阴影效果 */
            background-color: white; /* 容器背景色 */
            border-radius: 8px; /* 圆角边框 */
        }
        form {
            width: 100%;
        }
        label {
            margin-bottom: 5px;
            display: block; /* 使label独占一行 */
            color: #555; /* label颜色 */
        }
        input[type="text"],
        input[type="date"],
        textarea {
            width: 100%;
            padding: 10px;
            margin-bottom: 20px; /* 输入框间距 */
            border: 1px solid #ddd; /* 边框颜色 */
            border-radius: 4px; /* 圆角边框 */
            box-sizing: border-box; /* 边框包含在宽度内 */
        }
        textarea {
            resize: vertical; /* 允许垂直调整大小 */
        }
       .btn {
            background-color: #5cb85c; /* 按钮背景色 */
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 18px;
            transition: background-color 0.3s ease; /* 过渡效果 */
        }
       .btn:hover {
            background-color: #4cae4c; /* 鼠标悬停时的背景色 */
        }
    </style>
    <title>生成报告</title>
</head>
<body>
    <div id="head">生成报告</div>
    <div class="container">
        <form action="/generate" method="post" enctype="multipart/form-data">
            <label for="name">姓名:</label>
            <input type="text" id="name" name="name" required><br>

            <label for="date">日期:</label>
            <input type="date" id="date" name="date" required><br>

            <label for="data">数据 (JSON 格式):</label>
            <br>
            <textarea id="data" name="data" rows="10" cols="50" required>
[
    {"姓名": "张三", "年龄": 25, "性别": "男"},
    {"姓名": "李四", "年龄": 30, "性别": "女"},
    {"姓名": "王五", "年龄": 28, "性别": "男"}
]
            </textarea>

            <label for="image">图片:</label>
            <input type="file" id="image" name="image"><br><br>

            <button class="btn" type="submit">生成报告</button>
        </form>
    </div>
</body>
</html>
